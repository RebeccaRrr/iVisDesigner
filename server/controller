#!/usr/bin/python

import os, sys
import subprocess
import signal
import time
import psutil
import datetime

from server.config import config

path = os.path.dirname(os.path.realpath(__file__))
os.chdir(path)

path_run = os.path.join(path, "run")

path_gunicorn_pid_file = os.path.join(path_run, "gunicorn.pid")
path_twistd_pid_file = os.path.join(path_run, "twistd.pid")

django_address = config.get("django", "bind_address")
django_num_workers = int(config.get("django", "num_workers"))

path_django_log_file = os.path.join(path_run, "gunicorn.log")
path_twistd_log_file = os.path.join(path_run, "twistd.log")

class ProgressLine:
    def __init__(self, text):
        sys.stderr.write(text)
        sys.stderr.flush()
    def message(self, message):
        sys.stderr.write("\n * " + message)
        sys.stderr.flush()
    def done(self, text = "done"):
        sys.stderr.write(" [%s]\n" % text)
        sys.stderr.flush()

services = set()

def add_service(name, cmd, pidfile):
    services.add(name)
    path_started = os.path.join(path_run, "%s.started" % name)
    @shell_command(name + ".start")
    def cmd_start():
        with open(path_started, 'w') as f:
            f.write(str(time.time()))
        p = ProgressLine("Starting %s..." % name)
        if check_pid_file(pidfile):
            p.message("%s is already running." % name)
            p.done()
            return
        subprocess.call(cmd, shell = True)
        p.done()

    @shell_command(name + ".stop")
    def cmd_stop():
        try: os.unlink(path_started)
        except: pass
        p = ProgressLine("Stopping %s..." % name)
        kill_process_with_pidfile(pidfile, p)
        p.done()

    @shell_command(name + ".restart")
    def cmd_restart():
        cmd_stop()
        cmd_start()

    @shell_command(name + ".watchdog")
    def cmd_watchdog():
        if os.path.isfile(path_started):
            pid = check_pid_file(pidfile)
            if not pid:
                cmd_start()

    @shell_command(name + ".status")
    def cmd_status():
        pid = check_pid_file(pidfile)
        if pid:
            proc = psutil.Process(pid)
            print "Service %s is running, pid is: %d." % (name, pid)
            (rss, vms) = proc.memory_info()
            for c in proc.children(True):
                cmem = c.memory_info()
                rss += cmem.rss
                vms += cmem.vms
            print " * Resident: %.2f MB, VM: %.2f MB." % (rss / 1048576.0, vms / 1048576.0)
            (user, system) = proc.cpu_times()
            for c in proc.children(True):
                cpu = c.cpu_times()
                user += cpu.user
                system += cpu.system
            user = str(datetime.timedelta(seconds = user))
            system = str(datetime.timedelta(seconds = system))
            print " * %s user, %s system" % (user, system)
            print " * %d threads, %d file descriptors." % (
                proc.num_threads() + sum([c.num_threads() for c in proc.children(True)]),
                proc.num_fds() + sum([c.num_fds() for c in proc.children(True)])
            )
            print " * CPU: %.2f %%." % proc.cpu_percent()
            if len(proc.children(True)) > 0:
                print " *   C: " + ", ".join(["%.2f %%" % c.cpu_percent() for c in proc.children(True)])
            if "-c" in options or "--connections" in options:
                def print_connection(pid, info):
                    fd, family, type, laddr, raddr, status = info
                    laddr = ":".join(map(str, laddr))
                    raddr = ":".join(map(str, raddr))
                    print "    %8s %15s %20s %20s" % (pid, status, laddr, raddr)
                print " * Connections:"
                print "    %8s %15s %20s %20s" % ("PID", "Status", "Local", "Remote")
                for x in proc.connections(): print_connection(proc.pid, x)
                for c in proc.children(True):
                    for x in c.connections(): print_connection(c.pid, x)
        else:
            print "Service %s is stopped." % name

shell_commands = { }
def shell_command(f):
    def shell_command_internal(function):
        shell_commands[f] = function
        return function
    return shell_command_internal

# Check if a process exist with pid file f.
def check_pid_file(f):
    if os.path.isfile(f):
        with open(f, 'r') as fp:
            try:
                pid = int(fp.read())
            except:
                return False
            if psutil.pid_exists(pid): return pid
    return False

def kill_process_with_pidfile(f, p = None):
    pid = check_pid_file(f)
    if pid != False:
        if p: p.message("Sending SIGTERM to process %d..." % pid)
        if "-f" in options or "--force" in options:
            os.kill(pid, signal.SIGKILL)
        else:
            os.kill(pid, signal.SIGTERM)
        while check_pid_file(f):
            time.sleep(0.5)

add_service(
    "gunicorn",
    "gunicorn -w %d -p %s --bind=%s --log-level=info --log-file=%s -D server.wsgi:application" %
    (django_num_workers, path_gunicorn_pid_file, django_address, path_django_log_file),
    path_gunicorn_pid_file
)

add_service(
    "twistd",
    "twistd --pidfile=%s --logfile=%s -y server.tac" %
    (path_twistd_pid_file, path_twistd_log_file),
    path_twistd_pid_file
)

@shell_command("status")
def cmd_status():
    for service in services:
        shell_commands[service + ".status"]()

@shell_command("start")
def cmd_start():
    for service in services:
        shell_commands[service + ".start"]()

@shell_command("stop")
def cmd_stop():
    for service in services:
        shell_commands[service + ".stop"]()

@shell_command("restart")
def cmd_restart():
    for service in services:
        shell_commands[service + ".restart"]()

@shell_command("watchdog")
def cmd_restart():
    for service in services:
        shell_commands[service + ".watchdog"]()

if len(sys.argv) >= 2 and sys.argv[1] in shell_commands:
    options = sys.argv[2:]
    shell_commands[sys.argv[1]]()
else:
    print "iVisDesigner Backend Service Controller."
    print "Usage:"
    print "  controller command [options]"
    print "Commands:"
    commands = sorted([cmd for cmd in shell_commands])
    print "\n".join(map(lambda x: "  " + x, commands))
    print "Options:"
    print "  -f, --force : Force termination, use SIGKILL instead of SIGTERM."
